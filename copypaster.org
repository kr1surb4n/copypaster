WRITE ABOUT THAT:
So blue border is generated by  a listBox

https://developer.gnome.org/icon-naming-spec/ - icon names

list is for stuff that is selected


Application
|** style_provider
|--ApplicationWindow  - state set to NORMAL
|    |--Grid
|        |--Toolbar
            |- ToolButton (add)
            |- ToolButton (open)
            |- ToolButton (save_current)
            |- ToolButton (save_dirty_as)
|        |--MainFrame (Grid)
|        |      |--NewNote (Grid)
                        |- Entry
                        |- Button(QuickSave)
                        |- Button(Save)
                        |- TextView
|        |      |--FileCabinet (Notebook)
|        |              |- DirtyNotes (FlowBox)
                        |- ButtonGrid (FlowBox)
|        |--StatusBar
|
#-AppCallbacks
    - new_callback
    - about_callback
    - quit_callback
    - add_new_notebook
    - open_notebookopen_notebook
    - save_current_notebook
    - save_dirty_notebook




* how to make button maps

ctags -R *; cat tags | awk '{ print $1 }' | uniq | awk '{ printf "  - values: \"%s\"\n", $1}' > button_maps/copypaster.yml


TODOS:

* DONE add menu and put there functions from Toolbar
** DONE rmv toolbar
* DONE remove statusbar
* DRAW WHOLE PROJECT

* add "Add" button to StatusButtons and open dialog with newnote
* move NewNote widgets into dialog
* move callbacks about notebook from Application to FileCabinet

* change every callback into events
* add on CopyButton function to update values and label
* DirtNotes and ButtonGrid should be one class
* can i catch copy-paste that is happening when done inside application?

* DONE write down all events-actions before doing more stuff
use the signal bus to have everything


Application:
- New notebook      EMIT    new_notebook        
- Open notebook     EMIT    open_notebook       
- Save notebook     EMIT    save_notebook       -> MOVE TO FileCabinet
- Save notebook as  EMIT    save_notebook_as    -> MOVE TO FileCabinet
- Quit              EMIT    quit                -> NO HANDLE


StateButtons:
- Autosave           STATE autosave EMIT   autosave_on, autosave_off -> MOVE TO Jimmy
- Edit               STATE edit
- Remove             STATE remove
- Add                EMIT   new_button

NewNote:
SUBSCRIBE   new_button
SUBSCRIBE   add_button
SUBSCRIBE   edit_button     # Edit
SUBSCRIBE   remove_button
SUBSCRIBE   quick_save
SUBSCRIBE   save                 

Jimmy:
SUBSCRIBE   autosave_on
SUBSCRIBE   autosave_off
SUBSCRIBE   copy

CopyButton:
EMIT    remove_button   self
EMIT    copy    button.value
EMIT    edit_button self
on_button_click


BackButton:
EMIT    one_up

DialogEdit:
on_key_press_event 
on_save

FileCabinet:
SUBSCRIBE   new_notebook       
SUBSCRIBE   open_notebook
SUBSCRIBE   save_notebook       
SUBSCRIBE   save_notebook_as
SUBSCRIBE   quit



