info:
  - name: "Python"
  - category: python
buttons:
  - value: "int.bit_length()"
  - value: "int.to_bytes(length, byteorder, *, signed=False)"
  - value: "classmethod int.from_bytes(bytes, byteorder, *, signed=False)"
  - value: "int.as_integer_ratio()"
  - value: "float.as_integer_ratio()"
  - value: "float.is_integer()"
  - value: "float.hex()"
  - value: "classmethod float.fromhex(s)"
  - value: "container.__iter__()"
  - value: "iterator.__iter__()"
  - value: "iterator.__next__()"
  - value: "sort(*, key=None, reverse=False)"
  - value: "str.capitalize()"
  - value: "str.casefold()"
  - value: "str.center(width[, fillchar])"
  - value: "str.count(sub[, start[, end]])"
  - value: 'str.encode(encoding=utf-8", errors="strict")'
  - value: "str.endswith(suffix[, start[, end]])"
  - value: "str.expandtabs(tabsize=8)"
  - value: "str.find(sub[, start[, end]])"
  - value: "str.format(*args, **kwargs)"
  - value: "str.format_map(mapping)"
  - value: "str.index(sub[, start[, end]])"
  - value: "str.isalnum()"
  - value: "str.isalpha()"
  - value: "str.isascii()"
  - value: "str.isdecimal()"
  - value: "str.isdigit()"
  - value: "str.isidentifier()"
  - value: "str.islower()"
  - value: "str.isnumeric()"
  - value: "str.isprintable()"
  - value: "str.isspace()"
  - value: "str.istitle()"
  - value: "str.isupper()"
  - value: "str.join(iterable)"
  - value: "str.ljust(width[, fillchar])"
  - value: "str.lower()"
  - value: "str.lstrip([chars])"
  - value: "static str.maketrans(x[, y[, z]])"
  - value: "str.partition(sep)"
  - value: "str.replace(old, new[, count])"
  - value: "str.rfind(sub[, start[, end]])"
  - value: "str.rindex(sub[, start[, end]])"
  - value: "str.rjust(width[, fillchar])"
  - value: "str.rpartition(sep)"
  - value: "str.rsplit(sep=None, maxsplit=-1)"
  - value: "str.rstrip([chars])"
  - value: "str.split(sep=None, maxsplit=-1)"
  - value: "str.splitlines([keepends])"
  - value: "str.startswith(prefix[, start[, end]])"
  - value: "str.strip([chars])"
  - value: "str.swapcase()"
  - value: "str.title()"
  - value: "str.translate(table)"
  - value: "str.upper()"
  - value: "str.zfill(width)"
  - value: "classmethod fromhex(string)"
  - value: "hex([sep[, bytes_per_sep]])"
  - value: "classmethod fromhex(string)"
  - value: "hex([sep[, bytes_per_sep]])"
  - value: "bytes.count(sub[, start[, end]])"
  - value: "bytearray.count(sub[, start[, end]])"
  - value: 'bytes.decode(encoding=utf-8", errors="strict")'
  - value: 'bytearray.decode(encoding=utf-8", errors="strict")'
  - value: "bytes.endswith(suffix[, start[, end]])"
  - value: "bytearray.endswith(suffix[, start[, end]])"
  - value: "bytes.find(sub[, start[, end]])"
  - value: "bytearray.find(sub[, start[, end]])"
  - value: "bytes.index(sub[, start[, end]])"
  - value: "bytearray.index(sub[, start[, end]])"
  - value: "bytes.join(iterable)"
  - value: "bytearray.join(iterable)"
  - value: "static bytes.maketrans(from, to)"
  - value: "static bytearray.maketrans(from, to)"
  - value: "bytes.partition(sep)"
  - value: "bytearray.partition(sep)"
  - value: "bytes.replace(old, new[, count])"
  - value: "bytearray.replace(old, new[, count])"
  - value: "bytes.rfind(sub[, start[, end]])"
  - value: "bytearray.rfind(sub[, start[, end]])"
  - value: "bytes.rindex(sub[, start[, end]])"
  - value: "bytearray.rindex(sub[, start[, end]])"
  - value: "bytes.rpartition(sep)"
  - value: "bytearray.rpartition(sep)"
  - value: "bytes.startswith(prefix[, start[, end]])"
  - value: "bytearray.startswith(prefix[, start[, end]])"
  - value: "bytes.translate(table, /, delete=b')"
  - value: "bytearray.translate(table, /, delete=b')"
  - value: "bytes.center(width[, fillbyte])"
  - value: "bytearray.center(width[, fillbyte])"
  - value: "bytes.ljust(width[, fillbyte])"
  - value: "bytearray.ljust(width[, fillbyte])"
  - value: "bytes.lstrip([chars])"
  - value: "bytearray.lstrip([chars])"
  - value: "bytes.rjust(width[, fillbyte])"
  - value: "bytearray.rjust(width[, fillbyte])"
  - value: "bytes.rsplit(sep=None, maxsplit=-1)"
  - value: "bytearray.rsplit(sep=None, maxsplit=-1)"
  - value: "bytes.rstrip([chars])"
  - value: "bytearray.rstrip([chars])"
  - value: "bytes.split(sep=None, maxsplit=-1)"
  - value: "bytearray.split(sep=None, maxsplit=-1)"
  - value: "bytes.strip([chars])"
  - value: "bytearray.strip([chars])"
  - value: "bytes.capitalize()"
  - value: "bytearray.capitalize()"
  - value: "bytes.expandtabs(tabsize=8)"
  - value: "bytearray.expandtabs(tabsize=8)"
  - value: "bytes.isalnum()"
  - value: "bytearray.isalnum()"
  - value: "bytes.isalpha()"
  - value: "bytearray.isalpha()"
  - value: "bytes.isascii()"
  - value: "bytearray.isascii()"
  - value: "bytes.isdigit()"
  - value: "bytearray.isdigit()"
  - value: "bytes.islower()"
  - value: "bytearray.islower()"
  - value: "bytes.isspace()"
  - value: "bytearray.isspace()"
  - value: "bytes.istitle()"
  - value: "bytearray.istitle()"
  - value: "bytes.isupper()"
  - value: "bytearray.isupper()"
  - value: "bytes.lower()"
  - value: "bytearray.lower()"
  - value: "bytes.splitlines(keepends=False)"
  - value: "bytearray.splitlines(keepends=False)"
  - value: "bytes.swapcase()"
  - value: "bytearray.swapcase()"
  - value: "bytes.title()"
  - value: "bytearray.title()"
  - value: "bytes.upper()"
  - value: "bytearray.upper()"
  - value: "bytes.zfill(width)"
  - value: "bytearray.zfill(width)"
  - value: "__eq__(exporter)"
  - value: "tobytes(order=None)"
  - value: "hex([sep[, bytes_per_sep]])"
  - value: "tolist()"
  - value: "toreadonly()"
  - value: "release()"
  - value: "cast(format[, shape])"
  - value: "isdisjoint(other)"
  - value: "issubset(other)"
  - value: "set <= other"
  - value: "set < other"
  - value: "issuperset(other)"
  - value: "set >= other"
  - value: "set > other"
  - value: "union(*others)"
  - value: "set | other | ..."
  - value: "intersection(*others)"
  - value: "set & other & ..."
  - value: "difference(*others)"
  - value: "set - other - ..."
  - value: "symmetric_difference(other)"
  - value: "set ^ other"
  - value: "copy()"
  - value: "update(*others)"
  - value: "set |= other | ..."
  - value: "intersection_update(*others)"
  - value: "set &= other & ..."
  - value: "difference_update(*others)"
  - value: "set -= other | ..."
  - value: "symmetric_difference_update(other)"
  - value: "set ^= other"
  - value: "add(elem)"
  - value: "remove(elem)"
  - value: "discard(elem)"
  - value: "pop()"
  - value: "clear()"
  - value: "clear()"
  - value: "copy()"
  - value: "classmethod fromkeys(iterable[, value])"
  - value: "get(key[, default])"
  - value: "items()"
  - value: "keys()"
  - value: "pop(key[, default])"
  - value: "popitem()"
  - value: "setdefault(key[, default])"
  - value: "update([other])"
  - value: "values()"
  - value: "contextmanager.__enter__()"
  - value: "contextmanager.__exit__(exc_type, exc_val, exc_tb)"
  - value: "class.mro()"
  - value: "class.__subclasses__()"
